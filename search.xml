<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python装饰器理解</title>
      <link href="/2020/02/29/intro-to-decorator/"/>
      <url>/2020/02/29/intro-to-decorator/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文根据<a href="https://github.com/Computing-Intelligence/jupyters_and_slides" target="_blank" rel="noopener">这儿</a>的学习资源加上自己的理解整理而成。本文适合对装饰器完全陌生的小白，为了搞清来龙去脉，会比较啰嗦，请读者根据需要选择食用。<br>之前在书上看了<strong>装饰器(decorator)</strong>的介绍，第一感觉有点像数学中泛函的概念，由于不经常使用装饰器，理解始终不够透彻。现在趁这个学习的机会，整理记录一下思路，加深理解。<br>&nbsp;<br>有位大佬说过：抽象是计算机科学的灵魂。要深入的理解，而不是仅仅依葫芦画瓢使用的话，那么装饰器还得从<em>编程思维</em>(或编程范式)讲起。都说Python同时是面向过程(procedure-oriented)、面向函数(function-oriented)和面向对象(object-oriented)的。这里的<em>面向</em>到底是什么意思，这些术语的由来是什么呢？<br>举例简单说明下。<strong>面向过程</strong>(procedure也有人叫做流程)是指将一个任务拆分成一条一条的指令，按流程一步步做完就完成了。比如如何煎鸡蛋，先拿碗–把蛋打好–搅匀–锅烧热–…..按流程一直做下来不出错，你就能完成任务。<br>&nbsp;<br><strong>面向函数</strong>比面向过程稍抽象一层，它将任务分割为若干个小任务，只要按一定的顺序完成小任务，那么最终也能完成任务。比如造一辆车，可以将它分割为造轮子，造引擎，造方向盘，造座位……直到最终完成一辆车。<br>&nbsp;<br>而<strong>面向对象</strong>比面向函数更抽象一层，对于一个任务，它首先分析其中的共性或者模式，然后按各个模式做出具体实例。还是拿造车为例，这次不只是一辆，而可能要造各种各样的车，然后我发现车都有轮子、引擎、座位等等，那么我首先做一个制造轮子的机器，只有我稍微调整仪表板，这个机器就能造出具有不同材质、大小、颜色等等属性的轮子；同样，我再制造引擎机器、座位机器等等。甚至我可以将抽象再升级一层，我把前面哪些小机器整合成一个超级造车机器(这个机器对应一个术语叫做类, class)，我想要什么样的车，只需要将机器仪表板上的按钮调到适当的位置即可。这种路子就是面向对象。你可以发现，对于一些特别巨大的任务，面向对象相比前面两种路子，能省去大量重复工作。<br>&nbsp;<br>当然，这儿并不是说那种路子好，没有这回事，还是看你的任务是什么。网上有关于这三种编程范式更详细的介绍，感兴趣的话可以去搜一下。  </p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>话说回来，Python面向函数的特性使得函数可以作为变量，可以作为参数，可以作为返回值…，那么，说了这些，和装饰器有啥联系呢？下面我们通过一个问题来引出装饰器。<br>&nbsp;  </p><h3 id="质数查找问题"><a href="#质数查找问题" class="headerlink" title="质数查找问题"></a>质数查找问题</h3><p><strong>给你一个自然数n <em>(n &gt; 1)</em>，请给出 &lt; n的所有所有质数。</strong><br>&nbsp;<br>怎么做呢？一个比较直观粗暴的思路就是，我从1开始一直到n，挨个判断这些数是否是质数，每发现一个质数就将它保存下来。(提醒：质数是指只能被1和自身整除的自然数。)<br>那么第一步，我需要一个函数来判断某个数是否为质数。这儿我们给出一种低效和一种更高效的实现：  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_primer_low</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""低效判断n是否为质数"""</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_primer_high</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""高效判断n是否为质数"""</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    root <span class="token operator">=</span> int<span class="token punctuation">(</span>n <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><p>然后获取小于n的所有质数： </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_primers</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断primer函数作为参数传入</span>    <span class="token triple-quoted-string string">"""获取从1到n中的所有质数"""</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primer_func<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>比如我现在输入  </p><pre class=" language-python"><code class="language-python">get_primers<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> is_primer_low<span class="token punctuation">)</span></code></pre><p>我会得到  </p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span></code></pre><h3 id="新的要求"><a href="#新的要求" class="headerlink" title="新的要求"></a>新的要求</h3><p>好，上面提出的问题已经解决了。<u>但是现在我想再加入一些要求，比如我想计算这个过程的时间开销</u>(因为求质数这个问题经常用来做程序性能分析例子)。用time模块来实现：  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">get_primers_t</span><span class="token punctuation">(</span>n， primer_func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""获取从1到n中的所有质数"""</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primer_func<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>执行  </p><pre class=" language-python"><code class="language-python">get_primers_t<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> is_primer_high<span class="token punctuation">)</span></code></pre><p>得到  </p><pre class=" language-python"><code class="language-python">time used<span class="token punctuation">:</span> <span class="token number">1.2874603271484375e-05</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span></code></pre><h3 id="一个奇怪的函数"><a href="#一个奇怪的函数" class="headerlink" title="一个奇怪的函数"></a>一个奇怪的函数</h3><p>好，<strong>现在关键的地方来了</strong>。假如我们遇到这种情况，你项目中有很多像<code>get_primers_t()</code>这样的函数需要加计时功能，那么你需要重复地在很多<code>get_primers_t()</code>里面写time功能。又或者，上面是已经发布的项目，你很难直接去<code>get_primers_t()</code>中注释掉那些time代码。总之你直接操作<code>get_primers_t()</code>很麻烦。怎样处理呢？<br>这次我们不准备把计时功能直接写入<code>get_primers()</code>，我们先研究一下下面这个函数：  </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">_time</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""我们将在这里加入计时功能"""</span>        result <span class="token operator">=</span> func<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> _timeget_primers_with_time <span class="token operator">=</span> get_time<span class="token punctuation">(</span>get_primers<span class="token punctuation">)</span></code></pre><p>为了分析这个函数的构造，我们先看看<code>get_primers_with_time</code>到底是个啥：  </p><pre class=" language-python"><code class="language-python">help<span class="token punctuation">(</span>get_primers_with_time<span class="token punctuation">)</span></code></pre><p>输出  </p><pre class=" language-python"><code class="language-python">Help on function _time <span class="token keyword">in</span> module __main__<span class="token punctuation">:</span>_time<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>    我们将在这里加入计时功能</code></pre><p>从输出可以看到变量<code>get_primers_with_time</code>实际上就是<code>_time()</code>函数， 它接收2个参数<code>arg1</code>, <code>arg2</code>, 而这两个参数传给<code>func()</code>函数，注意到<code>func</code>是<code>get_time()</code>的参数，这里我们传给<code>get_time()</code>的参数是<code>get_primers</code>，也就是说<code>func</code>实际上就是<code>get_primers()</code>函数(arg1 –&gt; n, arg2 –&gt; primer_func).<br>现在，我们再把_time中的计时功能完善： </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">_time</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""加入计时功能"""</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> func<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> _time</code></pre><p>这次我们将返回值命名成<code>get_primers</code>:  </p><pre class=" language-python"><code class="language-python">get_primers <span class="token operator">=</span> get_time<span class="token punctuation">(</span>get_primers<span class="token punctuation">)</span></code></pre><p>那么这个返回的<code>get_primers</code>和上面定义的<code>get_primers_t()</code>函数功能就完全一样了，但是计时功能是写在<code>get_primers()</code>外部的。我们可以这样使用它：  </p><pre class=" language-python"><code class="language-python">get_primers<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> is_primer_high<span class="token punctuation">)</span> </code></pre><p>输出：</p><pre class=" language-python"><code class="language-python">time used<span class="token punctuation">:</span> <span class="token number">2.5272369384765625e-05</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span></code></pre><p>放到一起看一下： </p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_primers</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断primer函数作为参数传入</span>    <span class="token triple-quoted-string string">"""获取从1到n中的所有质数"""</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primer_func<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">_time</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""加入计时功能"""</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> func<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> _time</code></pre><h3 id="你刚写了一个装饰器"><a href="#你刚写了一个装饰器" class="headerlink" title="你刚写了一个装饰器"></a>你刚写了一个装饰器</h3><p>看起来很不错，但是如果每次都要写上一遍<code>get_time()</code>函数的话，也比较麻烦。从Python2.6开始，就加了个标识符: <code>@</code><br>在定义好<code>get_time()</code>后，我们只需在需要用到它的函数上方加上<code>@get_time</code> （注意这儿的理解：get_time是一个装饰器，它里面放着一些装饰性的功能，现在<code>get_primers(n, primer_func)</code>需要这个功能），这儿调整下函数名以示区别：  </p><pre class=" language-python"><code class="language-python">@get_time  <span class="token keyword">def</span> <span class="token function">get_primers_with_decorator</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""获取从1到n中的所有质数"""</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primer_func<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p><code>@get_time</code>这一行完全等价于</p><pre class=" language-python"><code class="language-python">get_primers_with_decorator <span class="token operator">=</span> get_time<span class="token punctuation">(</span>get_primers_with_decorator<span class="token punctuation">)</span></code></pre><p>即，它返回一个和你传入函数完全一样的函数，只不过同时附上了一些装饰性功能(这儿是添加计时功能)。通过输入</p><pre class=" language-python"><code class="language-python">get_primers_with_decorator</code></pre><p>你会得到和输入get_primers一样的结果：  </p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>function __main__<span class="token punctuation">.</span>get_time<span class="token punctuation">.</span><span class="token operator">&lt;</span>locals<span class="token operator">></span><span class="token punctuation">.</span>_time<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token operator">></span></code></pre><p>好，到这儿，什么是装饰器基本就解释完了！下面还给了一些装饰器使用的例子：</p><h2 id="装饰器拓展"><a href="#装饰器拓展" class="headerlink" title="装饰器拓展"></a>装饰器拓展</h2><h3 id="保持原函数的documents不变"><a href="#保持原函数的documents不变" class="headerlink" title="保持原函数的documents不变"></a>保持原函数的documents不变</h3><p>使用了上面定义的<code>get_time</code>装饰器后，你会发现原函数<code>get_primers_with_decorator</code>的doc变掉了：</p><pre class=" language-python"><code class="language-python">help<span class="token punctuation">(</span>get_primers_with_decorator<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出</span>get_primers_with_decorator<span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span>    加入计时功能</code></pre><p>即，它变成了<code>_time()</code>函数的doc. 此时，python提供了一个来保持doc一致的装饰器<code>@wraps</code>: </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    @wraps  <span class="token comment" spellcheck="true"># 给_time()添加一个装饰器</span>    <span class="token keyword">def</span> <span class="token function">_time</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""加入计时功能"""</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> func<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> _time@get_time  <span class="token keyword">def</span> <span class="token function">get_primers_with_decorator</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""获取从1到n中的所有质数"""</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primer_func<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>在查看<code>get_primers_with_decorator</code>的doc：  </p><pre class=" language-python"><code class="language-python">help<span class="token punctuation">(</span>get_primers_with_decorator<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出</span>get_primers_with_decorator<span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span>    获取从<span class="token number">1</span>到n中的所有质数</code></pre><h3 id="用装饰器实现加速"><a href="#用装饰器实现加速" class="headerlink" title="用装饰器实现加速"></a>用装饰器实现加速</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    cached <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 添加一个缓存字典</span>    @wraps      <span class="token keyword">def</span> <span class="token function">_time</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""加入计时功能"""</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 如果第二次看到同样的参数，直接返回结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token keyword">in</span> cached<span class="token punctuation">:</span> <span class="token keyword">return</span> cached<span class="token punctuation">[</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> func<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>            cached<span class="token punctuation">[</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> result  <span class="token comment" spellcheck="true"># 算过的都写入缓存</span>        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> _time@get_time  <span class="token keyword">def</span> <span class="token function">get_primers_with_cached</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""获取从1到n中的所有质数"""</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primer_func<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>加入缓存机制后，你第一次查找某个数：  </p><pre class=" language-python"><code class="language-python"><span class="token operator">%</span>time r <span class="token operator">=</span> get_primers_with_cached<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> is_primer<span class="token punctuation">)</span></code></pre><p>用时可能是400ms左右，而你再次运行(即再一次查找这个数)，运行时间变为8us左右(具体时间根据你的电脑不同而有所变化)，因为这个数的查找结果已经写入了缓存，被直接返回。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World Hexo Page</title>
      <link href="/2020/02/27/hello-world/"/>
      <url>/2020/02/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
