<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编译系统、Syntax Tree、对话机器人</title>
      <link href="/2020/03/24/syntaxtree/"/>
      <url>/2020/03/24/syntaxtree/</url>
      
        <content type="html"><![CDATA[<p>学习笔记：  </p><h1 id="语法树：简单计算系统"><a href="#语法树：简单计算系统" class="headerlink" title="语法树：简单计算系统"></a>语法树：简单计算系统</h1><p>用lambda表达式完成一个语法树，构建一个初级计算系统。  </p><div align="center"><img src="/.io//syntaxTree.png" width="300" height="240" alt="syntaxTree" align="center"></div>   <p><img src="/.io//syntaxTree.png" alt="语法树"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义常数和变量，常数直接返回，变量按key取值</span>Num <span class="token operator">=</span> <span class="token keyword">lambda</span> env<span class="token punctuation">,</span> n<span class="token punctuation">:</span> nVar <span class="token operator">=</span> <span class="token keyword">lambda</span> env<span class="token punctuation">,</span> x<span class="token punctuation">:</span> env<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 定义加减乘除运算符</span>Add <span class="token operator">=</span> <span class="token keyword">lambda</span> env<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> _eval<span class="token punctuation">(</span>env<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> _eval<span class="token punctuation">(</span>env<span class="token punctuation">,</span> b<span class="token punctuation">)</span>Sub <span class="token operator">=</span> <span class="token keyword">lambda</span> env<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> _eval<span class="token punctuation">(</span>env<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">-</span> _eval<span class="token punctuation">(</span>env<span class="token punctuation">,</span> b<span class="token punctuation">)</span>Mul <span class="token operator">=</span> <span class="token keyword">lambda</span> env<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> _eval<span class="token punctuation">(</span>env<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> _eval<span class="token punctuation">(</span>env<span class="token punctuation">,</span> b<span class="token punctuation">)</span>Dvi <span class="token operator">=</span> <span class="token keyword">lambda</span> env<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> _eval<span class="token punctuation">(</span>env<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">/</span> _eval<span class="token punctuation">(</span>env<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定义运算表达式；expr[0]为运算符，*expr[1:]解包参数</span>_eval <span class="token operator">=</span> <span class="token keyword">lambda</span> env<span class="token punctuation">,</span> expr<span class="token punctuation">:</span> expr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token operator">*</span>expr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如我们有变量库：  </p><pre class="line-numbers language-python"><code class="language-python">env <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>     <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>     <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 以下两行等价，输出为3</span><span class="token keyword">print</span><span class="token punctuation">(</span>Var<span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_eval<span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token punctuation">(</span>Var<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 以下两行等价，输出为5</span><span class="token keyword">print</span><span class="token punctuation">(</span>Num<span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_eval<span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token punctuation">(</span>Num<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来看看，上图中的树可以表示为：<br><code>tree = (Add, (Var, 'a'), (Mul, (Num, 5), (Var, 'b')))</code><br>那么，我们可以这样得到计算结果：<br><code>print(_eval(env, tree))  # 输出为21</code>    </p><hr><p>简单分析：<br><code>_eval()</code>这个函数返回单个运算操作，该函数在整个运算过程中被<strong>递归调用</strong>。例如<code>tree</code>在运算过程中首先解析为一个<code>Add</code>操作:<br><code>Add(_eval(env, (Var, 'a')) + (Mul, (Num, 5), (Var, 'b'))</code><br><code>Add</code>中左一项解析为<br><code>Var(env, 'a')</code>,<br>右一项解析为<br><code>Mul((Num, 5), (Var, 'b'))</code><br>这一项继续解析为<br><code>_eval(env, (Num, 5)) * _eval(env, (Var, 'b'))</code><br>这两项再进一步解析（上面已print）····    </p><hr><h1 id="回合制游戏-对话机器人"><a href="#回合制游戏-对话机器人" class="headerlink" title="回合制游戏/对话机器人"></a>回合制游戏/对话机器人</h1><p>构建一个回合制游戏模拟器  </p><pre class="line-numbers language-python"><code class="language-python">grammar <span class="token operator">=</span> <span class="token triple-quoted-string string">'''战斗 => 攻击 结果攻击 => 主语 动作 技能 结果 => 主语 获得 效果主语 => 剑侠客 | 飞燕女 | 龙太子 | 舞天姬 | 虎头怪 | 巨魔王 | 骨精灵 | 神天兵 | 逍遥生动作 => 施放 | 使用 | 召唤 技能 => 横扫千军 | 龙卷雨击 | 五雷轰顶 | 叽叽歪歪 | 阎王令 | 日光华 | 勾魂摄魄 | 失心符 | 乾坤袖 ｜飞沙走石获得 => 损失 | 获得 效果 => 数值 状态数值 => 1 | 1000 | 5000 | 100 状态 => 法力 | 生命'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">getGrammarDict</span><span class="token punctuation">(</span>gram<span class="token punctuation">,</span> linesplit<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">,</span> gramsplit<span class="token operator">=</span><span class="token string">'=>'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义字典</span>    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> gram<span class="token punctuation">.</span>split<span class="token punctuation">(</span>linesplit<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 去掉首尾空格后，若为空格则退出</span>        <span class="token keyword">if</span> <span class="token operator">not</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true"># 求每一行的(表达式,值), 以 key, value形式存储到result中</span>        <span class="token comment" spellcheck="true"># expr是key，statement是value</span>        expr<span class="token punctuation">,</span> statement <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span>gramsplit<span class="token punctuation">)</span>        result<span class="token punctuation">[</span>expr<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> statement<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>gramdict<span class="token punctuation">,</span> target<span class="token punctuation">,</span> isEng <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果目标词语不在语法树中，则直接返回该词</span>    <span class="token keyword">if</span> target <span class="token operator">not</span> <span class="token keyword">in</span> gramdict<span class="token punctuation">:</span>        <span class="token keyword">return</span> target    <span class="token comment" spellcheck="true"># 从语法库中取词，带"|"的晖随机选取一个值，不带的会选取所有</span>    find <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>gramdict<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把结果以blank连接起来，英文单词用空格链接</span>    blank<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">if</span> isEng<span class="token punctuation">:</span>        blank<span class="token operator">=</span><span class="token string">' '</span>    <span class="token comment" spellcheck="true"># 递归调用generate</span>    sts <span class="token operator">=</span> blank<span class="token punctuation">.</span>join<span class="token punctuation">(</span>generate<span class="token punctuation">(</span>gramdict<span class="token punctuation">,</span> t<span class="token punctuation">,</span> isEng<span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> find<span class="token punctuation">)</span>    <span class="token keyword">return</span> sts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成战斗：  </p><pre class="line-numbers language-python"><code class="language-python">gramdict <span class="token operator">=</span> getGrammarDict<span class="token punctuation">(</span>grammar<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generate<span class="token punctuation">(</span>gramdict<span class="token punctuation">,</span> <span class="token string">"战斗"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generate<span class="token punctuation">(</span>gramdict<span class="token punctuation">,</span> <span class="token string">"战斗"</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">飞燕女施放勾魂摄魄剑侠客损失<span class="token number">1</span>法力虎头怪 使用 日光华 舞天姬 损失 <span class="token number">1000</span> 法力<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>字典解析结果：  </p><pre class="line-numbers language-python"><code class="language-python">gramdict <span class="token operator">=</span> getGrammarDict<span class="token punctuation">(</span>grammar<span class="token punctuation">)</span>gramdict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token string">'战斗'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'攻击'</span><span class="token punctuation">,</span> <span class="token string">'结果'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'攻击'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'主语'</span><span class="token punctuation">,</span> <span class="token string">'动作'</span><span class="token punctuation">,</span> <span class="token string">'技能'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'结果'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'主语'</span><span class="token punctuation">,</span> <span class="token string">'获得'</span><span class="token punctuation">,</span> <span class="token string">'效果'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'主语'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'剑侠客'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'飞燕女'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'龙太子'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'舞天姬'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'虎头怪'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'巨魔王'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'骨精灵'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'神天兵'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'逍遥生'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'动作'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'施放'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'使用'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'召唤'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'技能'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'横扫千军'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'龙卷雨击'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'飞沙走石'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'叽叽歪歪'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'阎王令'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'日光华'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'勾魂摄魄'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'失心符'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'乾坤袖'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'获得'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'损失'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'获得'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'效果'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'数值'</span><span class="token punctuation">,</span> <span class="token string">'状态'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'数值'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'1000'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'5000'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'100'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'状态'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'法力'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'生命'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以将中间过程打印出来，看看<code>generate()</code>是如何递归调用的：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>gramdict<span class="token punctuation">,</span> target<span class="token punctuation">,</span> isEng <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果目标词语不在语法树中，则直接返回该词</span>    <span class="token keyword">if</span> target <span class="token operator">not</span> <span class="token keyword">in</span> gramdict<span class="token punctuation">:</span>        <span class="token keyword">return</span> target    <span class="token comment" spellcheck="true"># 从语法库中取词，带"|"的晖随机选取一个值，不带的会选取所有</span>    find <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>gramdict<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把结果以blank连接起来</span>    blank<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">if</span> isEng<span class="token punctuation">:</span>        blank<span class="token operator">=</span><span class="token string">' '</span>    <span class="token comment" spellcheck="true"># 递归调用generate</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>find<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> blank<span class="token punctuation">.</span>join<span class="token punctuation">(</span>generate<span class="token punctuation">(</span>gramdict<span class="token punctuation">,</span> t<span class="token punctuation">,</span> isEng<span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> find<span class="token punctuation">)</span>generate<span class="token punctuation">(</span>gramdict<span class="token punctuation">,</span> <span class="token string">"战斗"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'攻击'</span><span class="token punctuation">,</span> <span class="token string">'结果'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token string">'主语'</span><span class="token punctuation">,</span> <span class="token string">'动作'</span><span class="token punctuation">,</span> <span class="token string">'技能'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token string">'龙太子'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token string">'使用'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token string">'飞沙走石'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token string">'主语'</span><span class="token punctuation">,</span> <span class="token string">'获得'</span><span class="token punctuation">,</span> <span class="token string">'效果'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token string">'剑侠客'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token string">'获得'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token string">'获得'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token string">'损失'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token string">'数值'</span><span class="token punctuation">,</span> <span class="token string">'状态'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token punctuation">[</span><span class="token string">'法力'</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>Out<span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'龙太子使用飞沙走石剑侠客损失1法力'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用统一的方式，可以构建一个简单的对话机器人：  </p><pre class="line-numbers language-python"><code class="language-python">host <span class="token operator">=</span> <span class="token triple-quoted-string string">"""host => 寒暄 报数 询问 具体业务 结尾 报数 => 我是工号 数字 号 ,数字 => 单个数字 | 数字 单个数字 单个数字 => 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 寒暄 => 称谓 打招呼 | 打招呼称谓 => 人称 ,人称 => 先生 | 女士 | 小朋友打招呼 => 你好 | 您好 询问 => 请问你要 | 您需要具体业务 => 喝酒 | 打牌 | 打猎 | 赌博结尾 => 吗？"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">gramdict <span class="token operator">=</span> getGrammarDict<span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generate<span class="token punctuation">(</span>gramdict<span class="token punctuation">,</span> <span class="token string">"host"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>generate<span class="token punctuation">(</span>gramdict<span class="token punctuation">,</span> <span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">女士<span class="token punctuation">,</span>你好我是工号<span class="token number">9</span>号<span class="token punctuation">,</span>请问你要打牌吗？小朋友 <span class="token punctuation">,</span> 你好 我是工号 <span class="token number">6</span> 号 <span class="token punctuation">,</span> 请问你要 喝酒 吗？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python多重继承</title>
      <link href="/2020/03/03/multi-inherit/"/>
      <url>/2020/03/03/multi-inherit/</url>
      
        <content type="html"><![CDATA[<p>多重继承适合处理对象具有多重层次(包含)关系且有一定复杂度的任务。例如，你利用一些数据做机器学习。需要先预处理数据，然后丢给一个特定的模型，最后你可能要把结果可视化。而(假设)处理数据有A、B两种方法，模型也有A、B 两种，可视化方法有一种。可以把整个pipeline写成下面这种形式：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 预处理方法类</span><span class="token keyword">class</span> <span class="token class-name">PreprocessorA</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'preprocessing by A'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PreprocessorB</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'preprocessing by B'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 模型类        </span><span class="token keyword">class</span> <span class="token class-name">ModelA</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'fitting by A'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ModelB</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'fitting by B'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可视化类        </span><span class="token keyword">class</span> <span class="token class-name">Visualization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 预处理方法重载 </span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 模型方法重载</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">visualize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'vidualizing...'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'vidualization completed.'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>preprocess<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>visualize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每一个步骤中可能的方法写好之后，我们可以根据实际需要来任意组合这些步骤: </p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用A方法预处理， A模型拟合，再可视化的学习器</span><span class="token keyword">class</span> <span class="token class-name">LearnerA</span><span class="token punctuation">(</span>PreprocessorA<span class="token punctuation">,</span> ModelA<span class="token punctuation">,</span> Visualization<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 使用B方法预处理， B模型拟合，再可视化的学习器</span><span class="token keyword">class</span> <span class="token class-name">LearnerB</span><span class="token punctuation">(</span>PreprocessorB<span class="token punctuation">,</span> ModelB<span class="token punctuation">,</span> Visualization<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 使用A方法预处理， B模型拟合，再可视化的学习器</span><span class="token keyword">class</span> <span class="token class-name">LearnerC</span><span class="token punctuation">(</span>PreprocessorA<span class="token punctuation">,</span> ModelB<span class="token punctuation">,</span> Visualization<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于某个数据集，如果适合使用A方法预处理， A模型拟合，再可视化。那么我们只需实例化对应的学习器类： </p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> LearnerA<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-python"><code class="language-python">preprocessing by Afitting by Avidualizing<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>vidualization completed<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再比如，实例化处理器C：  </p><pre class="line-numbers language-python"><code class="language-python">dataset_c <span class="token operator">=</span> LearnerC<span class="token punctuation">(</span><span class="token punctuation">)</span>dataset_c<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-python"><code class="language-python">preprocessing by Afitting by Bvidualizing<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>vidualization completed<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果针对每一种情况(不同的leaner)采用纯函数去写这些组合，那么当每个环节可能的选择比较多的时候，你要写的函数数量将大大增加，而多重类继承这可以轻松组合这些环节。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python中的*args和**kwargs</title>
      <link href="/2020/03/02/pyargs/"/>
      <url>/2020/03/02/pyargs/</url>
      
        <content type="html"><![CDATA[<p>经常使用Python的话，相信你在函数参数里已经频繁遇见*<em>args</em>和**<em>kwargs</em>这两个符号。最常见的场景比如调包侠们经常要查看某个库里面某个接口接受那些参数，一连串的参数后面经常以这两个参数结尾。下面简单介绍下参数这种写法到底是啥意思。<br>&nbsp;<br>先看个求和函数的例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">all_sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入  </p><pre class="line-numbers language-python"><code class="language-python">all_sum<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果这个函数是你写给别人用的API，而人家并不知道这里只能输入两个参数，于是他输入了：  </p><pre class="line-numbers language-python"><code class="language-python">all_sum<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么必然会报错：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError                          Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-97</span><span class="token operator">-</span><span class="token number">70e77b81c288</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> all_sum<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> all_sum<span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">2</span> positional arguments but <span class="token number">4</span> were given<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>all_sum()只能接收2个位置参数，但是你给了4个。<br>&nbsp;  </p><p>这时候Python提供了这样一种运算符，我们将all_sum()函数改进一下：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">all_sum_v2</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'arg type: {)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>type<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'args: '</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>agrs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再输入任意个参数：</p><pre class="line-numbers language-python"><code class="language-python">all_sum_v2<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">type<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span>args<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为了搞清楚args到底是啥，我特意在其中多加了3个<code>print</code>。输出第一行说明args的类型是一个<code>tuple</code>，第二、三行看出<code>args</code>就是你所输入的参数组成的一个<code>tuple</code>。<br><strong>这说明在定义函数时，<code>*args</code>将你的所有输入组织成一个<code>tuple</code>。</strong><br>&nbsp;<br>我们再来第一个版本的<code>all_sum()</code>函数，假如我现在的输入是一个列表<code>[3， 5]</code>，如果我直接把列表作为参数： </p><pre class="line-numbers language-python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>all_sum<span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这时会报错：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError                         Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-98</span><span class="token operator">-</span><span class="token number">52a2b35e240d</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> all_sum<span class="token punctuation">(</span>num_list<span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> all_sum<span class="token punctuation">(</span><span class="token punctuation">)</span> missing <span class="token number">1</span> required positional argument<span class="token punctuation">:</span> <span class="token string">'b'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果并不是我们所期望的去求列表里面元素的和。这时我们可以这样写：  </p><pre class="line-numbers language-python"><code class="language-python">all_sum<span class="token punctuation">(</span><span class="token operator">*</span>num_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，<u><strong>在定义函数时<code>*</code>将所有参数打包成一个<code>tuple</code>; 而参数被函数调用时，<code>*</code>将<code>list</code>或<code>tuple</code>解包成单个元素。</strong></u>据说在其他语言里这个星号叫splat运算符，感兴趣的童鞋可以自行觅食。<br>&nbsp;<br>搞懂了<code>*args</code>，<code>**kwargs</code>就不难理解了。因为只要你稍微熟悉Python，应该就知道位置参数和关键字参数；不过这儿<code>*args</code>一个星号和<code>*kwargs</code>两个星号还是有一些区别的，继续看例子。  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_age_by_name</span><span class="token punctuation">(</span>name1<span class="token punctuation">,</span> name2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> name1 <span class="token operator">+</span> name2add_age_by_name<span class="token punctuation">(</span>name1<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span> name2<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>得到输出： </p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">52</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你输入超过2个关键字参数，比如<code>add_age_by_name(name1=22, name2=30,name3=7)</code>，那毫无疑问会报错。<br>不妨先把参数写成一个字典： </p><pre class="line-numbers language-python"><code class="language-python">parameters <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name1'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>    <span class="token string">'name2'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们这样传入：  </p><pre class="line-numbers language-python"><code class="language-python">add_age_by_name<span class="token punctuation">(</span><span class="token operator">**</span>parameters<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到同样正确的输出： </p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">52</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到<code>**</code>将字典中的<strong>key-value对</strong>解包成函数的<strong>参数名-参数值对</strong>了。那么，我们类比刚刚的<code>*args</code>将<code>add_age_by_name()</code>作改进：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_age_by_name</span><span class="token punctuation">(</span><span class="token operator">**</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span>value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>add_age_by_name<span class="token punctuation">(</span>name1<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> name2<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> name3<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> name_one_more<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>得到输出： </p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">73</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样总结一下，定义函数时，<code>**</code>将输入的关键字参数的参数名-参数值组织成一个字典；而被函数调用时，<code>**</code>将参数字典中的<strong>key-value对</strong>解包成函数的<strong>参数名-参数值对</strong>。<br>&nbsp;<br>这样，<code>*args</code>和<code>**kwargs</code>就讲完了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python装饰器理解</title>
      <link href="/2020/02/29/intro-to-decorator/"/>
      <url>/2020/02/29/intro-to-decorator/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文根据<a href="https://github.com/Computing-Intelligence/jupyters_and_slides" target="_blank" rel="noopener">这儿</a>的学习资源加上自己的理解整理而成。本文适合对装饰器完全陌生的小白，为了搞清来龙去脉，会比较啰嗦，请读者根据需要选择食用。<br><u>如果你只想看一句话</u>：在某个函数<code>func</code>上面加个装饰器(本质也是一个函数)，你会原封不动的得到函数<code>func</code>，但<code>func</code>同时被注入了一些额外的功能(即装饰性的功能)。<br>&nbsp;<br>之前在书上看了<strong>装饰器(decorator)</strong>的介绍，第一感觉有点像数学中泛函的概念，由于不经常使用装饰器，理解始终不够透彻。现在趁这个学习的机会，整理记录一下思路，加深理解。<br>&nbsp;<br>有位大佬说过：抽象是计算机科学的灵魂。要深入的理解，而不是仅仅依葫芦画瓢使用的话，那么装饰器还得从<em>编程思维</em>(或编程范式)讲起。都说Python同时是面向过程(procedure-oriented)、面向函数(function-oriented)和面向对象(object-oriented)的。这里的<em>面向</em>到底是什么意思，这些术语的由来是什么呢？<br>举例简单说明下。<strong>面向过程</strong>(procedure也有人叫做流程)是指将一个任务拆分成一条一条的指令，按流程一步步做完就完成了。比如如何煎鸡蛋，先拿碗–把蛋打好–搅匀–锅烧热–…..按流程一直做下来不出错，你就能完成任务。<br>&nbsp;<br><strong>面向函数</strong>比面向过程稍抽象一层，它将任务分割为若干个小任务，只要按一定的顺序完成小任务，那么最终也能完成任务。比如造一辆车，可以将它分割为造轮子，造引擎，造方向盘，造座位……直到最终完成一辆车。<br>&nbsp;<br>而<strong>面向对象</strong>比面向函数更抽象一层，对于一个任务，它首先分析其中的共性或者模式，然后按各个模式做出具体实例。还是拿造车为例，这次不只是一辆，而可能要造各种各样的车，然后我发现车都有轮子、引擎、座位等等，那么我首先做一个制造轮子的机器，只有我稍微调整仪表板，这个机器就能造出具有不同材质、大小、颜色等等属性的轮子；同样，我再制造引擎机器、座位机器等等。甚至我可以将抽象再升级一层，我把前面哪些小机器整合成一个超级造车机器(这个机器对应一个术语叫做类, class)，我想要什么样的车，只需要将机器仪表板上的按钮调到适当的位置即可。这种路子就是面向对象。你可以发现，对于一些特别巨大的任务，面向对象相比前面两种路子，能省去大量重复工作。<br>&nbsp;<br>当然，这儿并不是说那种路子好，没有这回事，还是看你的任务是什么。网上有关于这三种编程范式更详细的介绍，感兴趣的话可以去搜一下。  </p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>话说回来，Python面向函数的特性使得函数可以作为变量，可以作为参数，可以作为返回值…，那么，说了这些，和装饰器有啥联系呢？下面我们通过一个问题来引出装饰器。<br>&nbsp;  </p><h3 id="质数查找问题"><a href="#质数查找问题" class="headerlink" title="质数查找问题"></a>质数查找问题</h3><p><strong>给你一个自然数n <em>(n &gt; 1)</em>，请给出 &lt; n的所有质数。</strong><br>&nbsp;<br>怎么做呢？一个比较直观粗暴的思路就是，我从1开始一直到n，挨个判断这些数是否是质数，每发现一个质数就将它保存下来。(提醒：质数是指只能被1和自身整除的自然数。)<br>那么第一步，我需要一个函数来判断某个数是否为质数。这儿我们给出一种低效和一种更高效的实现：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_primer_low</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""低效判断n是否为质数"""</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_primer_high</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""高效判断n是否为质数"""</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    root <span class="token operator">=</span> int<span class="token punctuation">(</span>n <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后获取小于n的所有质数： </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_primers</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断primer函数作为参数传入</span>    <span class="token triple-quoted-string string">"""获取从1到n中的所有质数"""</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primer_func<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如我现在输入  </p><pre class="line-numbers language-python"><code class="language-python">get_primers<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> is_primer_low<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我会得到  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="新的要求"><a href="#新的要求" class="headerlink" title="新的要求"></a>新的要求</h3><p>好，上面提出的问题已经解决了。<u>但是现在我想再加入一些要求，比如我想计算这个过程的时间开销</u>(因为求质数这个问题经常用来做程序性能分析例子)。用time模块来实现：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">get_primers_t</span><span class="token punctuation">(</span>n， primer_func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""获取从1到n中的所有质数"""</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primer_func<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行  </p><pre class="line-numbers language-python"><code class="language-python">get_primers_t<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> is_primer_high<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到  </p><pre class="line-numbers language-python"><code class="language-python">time used<span class="token punctuation">:</span> <span class="token number">1.2874603271484375e-05</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="一个奇怪的函数"><a href="#一个奇怪的函数" class="headerlink" title="一个奇怪的函数"></a>一个奇怪的函数</h3><p>好，<strong>现在关键的地方来了</strong>。假如我们遇到这种情况，你项目中有很多像<code>get_primers_t()</code>这样的函数需要加计时功能，那么你需要重复地在很多<code>get_primers_t()</code>里面写time功能。又或者，上面是已经发布的项目，你很难直接去<code>get_primers_t()</code>中注释掉那些time代码。总之你直接操作<code>get_primers_t()</code>很麻烦。怎样处理呢？<br>这次我们不准备把计时功能直接写入<code>get_primers()</code>，我们先研究一下下面这个函数：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">_time</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""我们将在这里加入计时功能"""</span>        result <span class="token operator">=</span> func<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> _timeget_primers_with_time <span class="token operator">=</span> get_time<span class="token punctuation">(</span>get_primers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了分析这个函数的构造，我们先看看<code>get_primers_with_time</code>到底是个啥：  </p><pre class="line-numbers language-python"><code class="language-python">help<span class="token punctuation">(</span>get_primers_with_time<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出  </p><pre class="line-numbers language-python"><code class="language-python">Help on function _time <span class="token keyword">in</span> module __main__<span class="token punctuation">:</span>_time<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>    我们将在这里加入计时功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从输出可以看到变量<code>get_primers_with_time</code>实际上就是<code>_time()</code>函数， 它接收2个参数<code>arg1</code>, <code>arg2</code>, 而这两个参数传给<code>func()</code>函数，注意到<code>func</code>是<code>get_time()</code>的参数，这里我们传给<code>get_time()</code>的参数是<code>get_primers</code>，也就是说<code>func</code>实际上就是<code>get_primers()</code>函数(arg1 –&gt; n, arg2 –&gt; primer_func).<br>现在，我们再把_time中的计时功能完善： </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">_time</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""加入计时功能"""</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> func<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> _time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次我们将返回值命名成<code>get_primers</code>:  </p><pre class="line-numbers language-python"><code class="language-python">get_primers <span class="token operator">=</span> get_time<span class="token punctuation">(</span>get_primers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么这个返回的<code>get_primers</code>和上面定义的<code>get_primers_t()</code>函数功能就完全一样了，但是计时功能是写在<code>get_primers()</code>外部的。我们可以这样使用它：  </p><pre class="line-numbers language-python"><code class="language-python">get_primers<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> is_primer_high<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-python"><code class="language-python">time used<span class="token punctuation">:</span> <span class="token number">2.5272369384765625e-05</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>放到一起看一下： </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_primers</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断primer函数作为参数传入</span>    <span class="token triple-quoted-string string">"""获取从1到n中的所有质数"""</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primer_func<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">_time</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""加入计时功能"""</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> func<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> _time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="你刚写了一个装饰器"><a href="#你刚写了一个装饰器" class="headerlink" title="你刚写了一个装饰器"></a>你刚写了一个装饰器</h3><p>看起来很不错，但是如果每次都要写上一遍<code>get_time()</code>函数的话，也比较麻烦。从Python2.6开始，就加了个标识符: <code>@</code><br>在定义好<code>get_time()</code>后，我们只需在需要用到它的函数上方加上<code>@get_time</code> （注意这儿的理解：get_time是一个装饰器，它里面放着一些装饰性的功能，现在<code>get_primers(n, primer_func)</code>需要这个功能），这儿调整下函数名以示区别：  </p><pre class="line-numbers language-python"><code class="language-python">@get_time  <span class="token keyword">def</span> <span class="token function">get_primers_with_decorator</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""获取从1到n中的所有质数"""</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primer_func<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@get_time</code>这一行完全等价于</p><pre class="line-numbers language-python"><code class="language-python">get_primers_with_decorator <span class="token operator">=</span> get_time<span class="token punctuation">(</span>get_primers_with_decorator<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即，它返回一个和你传入函数完全一样的函数，只不过同时附上了一些装饰性功能(这儿是添加计时功能)。通过输入</p><pre class="line-numbers language-python"><code class="language-python">get_primers_with_decorator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你会得到和输入get_primers一样的结果：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">&lt;</span>function __main__<span class="token punctuation">.</span>get_time<span class="token punctuation">.</span><span class="token operator">&lt;</span>locals<span class="token operator">></span><span class="token punctuation">.</span>_time<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>好，到这儿，什么是装饰器基本就解释完了！下面还给了一些装饰器使用的例子：</p><h2 id="装饰器拓展"><a href="#装饰器拓展" class="headerlink" title="装饰器拓展"></a>装饰器拓展</h2><h3 id="保持原函数的documents不变"><a href="#保持原函数的documents不变" class="headerlink" title="保持原函数的documents不变"></a>保持原函数的documents不变</h3><p>使用了上面定义的<code>get_time</code>装饰器后，你会发现原函数<code>get_primers_with_decorator</code>的doc变掉了：</p><pre class="line-numbers language-python"><code class="language-python">help<span class="token punctuation">(</span>get_primers_with_decorator<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出</span>get_primers_with_decorator<span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span>    加入计时功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即，它变成了<code>_time()</code>函数的doc. 此时，python提供了一个来保持doc一致的装饰器<code>@wraps</code>: </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    @wraps  <span class="token comment" spellcheck="true"># 给_time()添加一个装饰器</span>    <span class="token keyword">def</span> <span class="token function">_time</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""加入计时功能"""</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> func<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> _time@get_time  <span class="token keyword">def</span> <span class="token function">get_primers_with_decorator</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""获取从1到n中的所有质数"""</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primer_func<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在查看<code>get_primers_with_decorator</code>的doc：  </p><pre class="line-numbers language-python"><code class="language-python">help<span class="token punctuation">(</span>get_primers_with_decorator<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出</span>get_primers_with_decorator<span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span>    获取从<span class="token number">1</span>到n中的所有质数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用装饰器实现加速"><a href="#用装饰器实现加速" class="headerlink" title="用装饰器实现加速"></a>用装饰器实现加速</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    cached <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 添加一个缓存字典</span>    @wraps      <span class="token keyword">def</span> <span class="token function">_time</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""加入计时功能"""</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 如果第二次看到同样的参数，直接返回结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token keyword">in</span> cached<span class="token punctuation">:</span> <span class="token keyword">return</span> cached<span class="token punctuation">[</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> func<span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>            cached<span class="token punctuation">[</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> result  <span class="token comment" spellcheck="true"># 算过的都写入缓存</span>        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time used: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> _time@get_time  <span class="token keyword">def</span> <span class="token function">get_primers_with_cached</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> primer_func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""获取从1到n中的所有质数"""</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> primer_func<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加入缓存机制后，你第一次查找某个数：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">%</span>time r <span class="token operator">=</span> get_primers_with_cached<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> is_primer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用时可能是400ms左右，而你再次运行(即再一次查找这个数)，运行时间变为8us左右(具体时间根据你的电脑不同而有所变化)，因为这个数的查找结果已经写入了缓存，被直接返回。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World Hexo Page</title>
      <link href="/2020/02/27/hello-world/"/>
      <url>/2020/02/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>2019年年底(农历)，COVID-19在中国全面爆发；全国限制出行，于是有了这个博客… </p><p>&nbsp;<br>&nbsp;<br>&nbsp;<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
